services:
  # App
  # - Builds the application using the Dockerfile.
  # - Exposes port 3000.
  # - Depends on the db service being healthy.
  # - Sets environment variables and uses an .env file.
  # - Has a healthcheck that curls localhost:3000/health.
  # - Uses a named volume for node_modules.
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      db:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mongodb://root:example@db:27017/myapp?authSource=admin
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - node_modules:/app/node_modules

  # DB
  # - Uses MongoDB 7.0 image.
  # - Sets up volumes for persistent data and initialization script.
  # - Has a healthcheck.
  # - Sets environment variables for root username and password.
  # - Exposes port 27017.
  db:
    image: mongo:7.0
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js:ro
    command: mongod --bind_ip_all
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    deploy:
      resources:
        limits:
          memory: 2G
    ports:
      - '27017:27017'

  # Unit Test Runner
  # - Builds using the Dockerfile, targeting the unit-test stage.
  # - Runs Jest for unit tests.
  unit-test-runner:
    build:
      context: .
      target: unit-test
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 2G
    command:
      - sh
      - -c
      - |
        node --experimental-vm-modules node_modules/.bin/jest --config jest.config.docker.js

  # E2E Test Runner
  # - Builds using the Dockerfile, targeting the e2e-test stage.
  # - Uses environment variables from .env.test file and sets additional ones.
  # - Depends on db-test and app services.
  # - Waits for the app to be healthy before running e2e tests.
  e2e-test-runner:
    build:
      context: .
      target: e2e-test
    networks:
      - app-network
    env_file:
      - .env.test
    environment:
      - DATABASE_URL=mongodb://root:example@db-test:27017/myapp-test?authSource=admin
      - GOOGLE_SHEETS_ID=test-id
      - GOOGLE_SHEETS_CLIENT_EMAIL=test-user
      - GOOGLE_SHEETS_PRIVATE_KEY=test-key
      - GITHUB_TOKEN=test-github-token
      - GITHUB_OWNER=test-user
      - GITHUB_REPO=test-org/test-repo
      - CORS_ORIGIN=http://localhost:3000,null
    depends_on:
      - db-test
      - app
    deploy:
      resources:
        limits:
          memory: 3G
    command:
      - sh
      - -c
      - |
        npx wait-on http://app:3000/health --timeout 30000 &&
        node --experimental-vm-modules node_modules/.bin/jest --config jest.config.docker.js --testMatch "**/*.e2e.spec.js"
  # DB Test
  # - Similar to the db service, but for testing purposes.
  # - Uses a different volume for data and exposes port 27018.
  db-test:
    image: mongo:7.0
    volumes:
      - mongodb_test_data:/data/db
      - ./scripts/init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js:ro
    command: mongod --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    deploy:
      resources:
        limits:
          memory: 2G
    ports:
      - '27018:27017'

volumes:
  mongodb_data:
  mongodb_test_data:
  node_modules:

networks:
  app-network:
    driver: bridge
