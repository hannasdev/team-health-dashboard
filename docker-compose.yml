services:
  # App
  # - Builds the application using the Dockerfile.
  # - Exposes port 3000.
  # - Depends on the db service being healthy.
  # - Sets environment variables and uses an .env file.
  # - Has a healthcheck that curls localhost:3000/health.
  # - Uses a named volume for node_modules.
  # Production App
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      db:
        condition: service_healthy
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - node_modules:/app/node_modules
    profiles: ['prod']

  # Production Database
  db:
    image: mongo:7.0
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js:ro
    command: mongod --bind_ip_all
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    deploy:
      resources:
        limits:
          memory: 2G
    ports:
      - '27017:27017'
    profiles: ['prod']

  # Test App
  app-test:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3001:3000'
    depends_on:
      db-test:
        condition: service_healthy
    environment:
      - NODE_ENV=production
    env_file:
      - .env.e2e
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - test-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - node_modules_test:/app/node_modules
    profiles: ['e2e-test']

  # Test Database
  db-test:
    image: mongo:7.0
    volumes:
      - mongodb_test_data:/data/db
      - ./scripts/init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js:ro
    command: mongod --bind_ip_all
    networks:
      - test-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    deploy:
      resources:
        limits:
          memory: 2G
    ports:
      - '27018:27017'
    profiles: ['e2e-test']

  # Unit Test Runner
  unit-test-runner:
    build:
      context: .
      target: unit-test
    networks:
      - test-network
    env_file:
      - .env.test
    environment:
      - NODE_ENV=test
    deploy:
      resources:
        limits:
          memory: 2G
    command: node --experimental-vm-modules node_modules/.bin/jest --config jest.config.docker.js
    profiles: ['unit-test']

  # E2E Test Runner
  e2e-test-runner:
    build:
      context: .
      target: e2e-test
    networks:
      - test-network
    env_file:
      - .env.e2e
    environment:
      - NODE_ENV=e2e
    depends_on:
      db-test:
        condition: service_healthy
      app-test:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 3G
    command: >
      /bin/bash -c '
      echo "Starting E2E test runner..." &&
      echo "Waiting for app-test to be ready..." &&
      /home/nodejs/wait-for-it.sh app-test:3000 -t 120 &&
      echo "App-test is ready. Running E2E tests..." &&
      node --experimental-vm-modules node_modules/.bin/jest --config jest.config.docker.js --testMatch "**/dist/__tests__/e2e/**/*.e2e.spec.js" --forceExit --detectOpenHandles --runInBand --verbose
      '
    profiles: ['e2e-test']

volumes:
  mongodb_data:
  mongodb_test_data:
  node_modules:
  node_modules_test:

networks:
  app-network:
    driver: bridge
  test-network:
    driver: bridge
