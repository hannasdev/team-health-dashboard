name: Main Workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md' # Ignore all markdown files
      - 'docs/**' # Ignore everything in docs directory
      - .aidigestignore
      - .gitignore

jobs:
  version-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Check for version bump commit
        id: check_version_bump
        run: |
          if git log -1 --pretty=%B | grep -q "chore(release):"; then
            echo "is_version_bump=true" >> $GITHUB_OUTPUT
          else
            echo "is_version_bump=false" >> $GITHUB_OUTPUT
          fi

      - uses: ./.github/actions/setup-node
        if: steps.check_version_bump.outputs.is_version_bump == 'false'

      - uses: ./.github/actions/build-and-cache
        if: steps.check_version_bump.outputs.is_version_bump == 'false'
        with:
          cache-key-prefix: main

      - name: Bump version and update CHANGELOG
        if: steps.check_version_bump.outputs.is_version_bump == 'false'
        run: |
          set -eo pipefail

          if ! git config user.name github-actions; then
            echo "Failed to set git user name"
            exit 1
          fi

          if ! git config user.email github-actions; then
            echo "Failed to set git user email"
            exit 1
          fi

          git config user.name github-actions
          git config user.email github-actions@github.com

          # Fetch all tags and update local repository
          git fetch --tags
          git pull origin main

          # Get the current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Run standard-version to bump version, update CHANGELOG, and create tag
          # Use --skip.tag to prevent tagging, we'll do it manually
          npx standard-version --skip.tag

          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")

          # If the version hasn't changed, manually bump it
          if [ "$CURRENT_VERSION" == "$NEW_VERSION" ]; then
            npm version patch
            NEW_VERSION=$(node -p "require('./package.json').version")
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

          # Manually create or update the tag
          git tag -fa v$NEW_VERSION -m "chore(release): $NEW_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push changes
        if: steps.check_version_bump.outputs.is_version_bump == 'false'
        run: |
          git push origin main
          git push origin v${{ env.NEW_VERSION }} --force
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_version_bump.outputs.is_version_bump == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: false

  docker-build-and-push:
    needs: version-and-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/docker-setup
        with:
          docker-username: ${{ secrets.DOCKER_USERNAME }}
          docker-password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Get version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/team-health-dashboard:latest
            ${{ secrets.DOCKER_USERNAME }}/team-health-dashboard:${{ steps.package-version.outputs.current-version }}
          build-args: |
            NODE_ENV=production
          cache-from: type=gha,scope=docker-${{ github.sha }}
          cache-to: type=gha,mode=max,scope=docker-${{ github.sha }}
