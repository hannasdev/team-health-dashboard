services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      db:
        condition: service_healthy
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./src:/app/src
      - ./dist:/app/dist
      - node_modules:/app/node_modules

  db:
    image: mongo:latest
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js:ro
    command: mongod --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example

  test-runner:
    env_file:
      - .env
    environment:
      - DATABASE_URL=mongodb://db:27017/myapp-test # Use test database
      - GOOGLE_SHEETS_ID=test-id
      - GOOGLE_SHEETS_CLIENT_EMAIL=test-user
      - GOOGLE_SHEETS_PRIVATE_KEY=test-key
      - GITHUB_TOKEN=test-github-token
      - GITHUB_OWNER=test-user
      - GITHUB_REPO=test-org/test-repo
      - CORS_ORIGIN=http://localhost:3000,null
    build:
      context: .
      target: test
    depends_on:
      - db
    volumes:
      - ./src:/app/src # Mount source code
      - ./jest.config.ts:/app/jest.config.ts # Mount Jest config (if needed)
      - node_modules:/app/node_modules # Use the same volume for dependencies
    command: ['npm', 'run', 'test']

volumes:
  mongodb_data:
  node_modules:
