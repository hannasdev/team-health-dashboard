name: CI

on:
  push:
    branches: '*'
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  test-unit:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: |
          NODE_OPTIONS=--max_old_space_size=4096 npm run test:unit

  e2e-test:
    needs: [build, test-unit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build and run E2E tests with Docker Compose
        run: |
          docker-compose --profile e2e-test build
          docker-compose --profile e2e-test up --abort-on-container-exit --exit-code-from e2e-test-runner

      - name: Display logs
        if: always()
        run: docker-compose --profile e2e-test logs

    env:
      NODE_ENV: test
      DATABASE_URL: mongodb://root:example@127.0.0.1:27017/myapp?authSource=admin
      GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
      GOOGLE_SHEETS_CLIENT_EMAIL: ${{ secrets.GOOGLE_SHEETS_CLIENT_EMAIL }}
      GOOGLE_SHEETS_PRIVATE_KEY: ${{ secrets.GOOGLE_SHEETS_PRIVATE_KEY }}
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
      REPO_OWNER: ${{ secrets.REPO_OWNER }}
      REPO_REPO: ${{ secrets.REPO_REPO }}
      PORT: ${{ secrets.PORT }}
      CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      LOG_LEVEL: debug
      LOG_FORMAT: json
      LOG_FILE_PATH: ./logs
      API_URL: http://127.0.0.1:${{ secrets.PORT }}
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  version-and-release:
    needs: [build, test-unit, e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Bump version
        run: npm run release
      - name: Push changes
        run: |
          git push --follow-tags origin main

  docker-build-and-push:
    needs: version-and-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Get version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/your-image-name:latest
            ${{ secrets.DOCKER_USERNAME }}/your-image-name:${{ steps.package-version.outputs.current-version }}
          build-args: |
            NODE_ENV=production
