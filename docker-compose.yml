services:
  # App
  # - Builds the application using the Dockerfile.
  # - Exposes port 3000.
  # - Depends on the db service being healthy.
  # - Sets environment variables and uses an .env file.
  # - Has a healthcheck that curls localhost:3000/health.
  # - Uses a named volume for node_modules.
  # Production App
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      db:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
      - node_modules:/app/node_modules
    profiles: ['prod']

  # Production Database
  db:
    image: mongo:7.0
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js:ro
    command: mongod --bind_ip_all --verbose DEBUG_1
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    deploy:
      resources:
        limits:
          memory: 2G
    ports:
      - '27017:27017'
    profiles: ['prod']

  # Test App
  app-test:
    volumes:
      - ./logs:/home/nodejs/app/logs
      - node_modules_test:/app/node_modules
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=e2e
      - HOST=0.0.0.0
      - CORS_ORIGIN=${CORS_ORIGIN}
      - DATABASE_URL=mongodb://root:example@db-test:27017/myapp?authSource=admin
      - GOOGLE_SHEETS_CLIENT_EMAIL=${GOOGLE_SHEETS_CLIENT_EMAIL}
      - GOOGLE_SHEETS_ID=${GOOGLE_SHEETS_ID}
      - GOOGLE_SHEETS_PRIVATE_KEY=${GOOGLE_SHEETS_PRIVATE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_FILE_PATH=${LOG_FILE_PATH}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOG_LEVEL=${LOG_LEVEL}
      - MONGO_CONNECT_TIMEOUT_MS=${MONGO_CONNECT_TIMEOUT_MS}
      - MONGO_SERVER_SELECTION_TIMEOUT_MS=${MONGO_SERVER_SELECTION_TIMEOUT_MS}
      - PORT=${PORT}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - REPO_OWNER=${REPO_OWNER}
      - REPO_REPO=${REPO_REPO}
      - REPO_TOKEN=${REPO_TOKEN}
    ports:
      - '3001:3000'
    depends_on:
      db-test:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - test-network
    healthcheck:
      test: ['CMD', '/usr/local/bin/docker-healthcheck.sh']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    profiles: ['e2e-test']

  # Test Database
  db-test:
    image: mongo:7.0
    volumes:
      - mongodb_test_data:/data/db
      - ./scripts/init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js:ro
    command: mongod --bind_ip_all --quiet --logpath /dev/null --auth
    networks:
      - test-network
    healthcheck:
      test: |
        mongosh admin --verbose DEBUG_1 --eval '
          db.auth("root", "example");
          print(db.runCommand("ping").ok ? "MongoDB is ready." : "MongoDB is not ready.");
          print("Authentication successful");
        '
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      - MONGO_INITDB_DATABASE=myapp
    deploy:
      resources:
        limits:
          memory: 2G
    ports:
      - '27018:27017'
    profiles: ['e2e-test']

  # Unit Test Runner
  unit-test-runner:
    build:
      context: .
      target: unit-test
    networks:
      - test-network
    env_file:
      - .env.test
    environment:
      - NODE_ENV=test
    deploy:
      resources:
        limits:
          memory: 2G
    command: node --experimental-vm-modules node_modules/.bin/jest --config jest.config.docker.js
    profiles: ['unit-test']

  # E2E Test Runner
  e2e-test-runner:
    build:
      context: .
      target: e2e-test
    networks:
      - test-network
    environment:
      - NODE_ENV=e2e
      - API_URL=${API_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - DATABASE_URL=${DATABASE_URL}
      - GOOGLE_SHEETS_CLIENT_EMAIL=${GOOGLE_SHEETS_CLIENT_EMAIL}
      - GOOGLE_SHEETS_ID=${GOOGLE_SHEETS_ID}
      - GOOGLE_SHEETS_PRIVATE_KEY=${GOOGLE_SHEETS_PRIVATE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_FILE_PATH=${LOG_FILE_PATH}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOG_LEVEL=${LOG_LEVEL}
      - MONGO_CONNECT_TIMEOUT_MS=${MONGO_CONNECT_TIMEOUT_MS}
      - MONGO_SERVER_SELECTION_TIMEOUT_MS=${MONGO_SERVER_SELECTION_TIMEOUT_MS}
      - PORT=${PORT}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - REPO_OWNER=${REPO_OWNER}
      - REPO_REPO=${REPO_REPO}
      - REPO_TOKEN=${REPO_TOKEN}
    depends_on:
      db-test:
        condition: service_healthy
      app-test:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 3G
    command: >
      /bin/sh -c '
      echo "E2E test runner starting..." &&
      echo "Current directory: $$(pwd)" &&
      echo "Directory contents:" &&
      ls -la &&
      echo "Node version:" &&
      node --version &&
      echo "Jest path:" &&
      which jest || echo "Jest not found in PATH" &&
      echo "Looking for test files:" &&
      find . -name "*.e2e.spec.js" &&
      echo "Running tests..." &&
      node --experimental-vm-modules node_modules/.bin/jest --config jest.config.docker.js --testMatch "**/dist/__tests__/e2e/**/*.e2e.spec.js" --forceExit --detectOpenHandles --runInBand --verbose
      '
    profiles: ['e2e-test']

volumes:
  mongodb_data:
  mongodb_test_data:
  node_modules:
  node_modules_test:

networks:
  app-network:
    driver: bridge
  test-network:
    driver: bridge
