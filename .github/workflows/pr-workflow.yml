name: PR Workflow

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_test: ${{ steps.check.outputs.should_test }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes requiring tests
        id: check
        run: |
          echo "should_test=true" >> "$GITHUB_OUTPUT"

          LAST_SUCCESS_SHA=$(gh run list --branch "${{ github.head_ref }}" --workflow "Branch Workflow" --status success --json headSha --jq '.[0].headSha // empty' || echo "")

          if [ -n "$LAST_SUCCESS_SHA" ]; then
            echo "Found last successful run SHA: $LAST_SUCCESS_SHA"
            
            CHANGES=$(git diff --name-only $LAST_SUCCESS_SHA HEAD | grep -E '^(src/|test/|package\.json|package-lock\.json)' || true)
            
            if [ -z "$CHANGES" ]; then
              echo "No relevant changes since last successful test run"
              echo "should_test=false" >> "$GITHUB_OUTPUT"
            else
              echo "Detected changes requiring tests:"
              echo "$CHANGES"
              echo "should_test=true" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "No previous successful run found, running tests"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: check-changes
    if: needs.check-changes.outputs.should_test == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-and-cache
        with:
          cache-key-prefix: pr-${{ github.event.pull_request.number }}

  test-unit:
    needs: [check-changes, build]
    if: needs.check-changes.outputs.should_test == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-node
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            dist
            node_modules
          key: ${{ runner.os }}-pr-${{ github.event.pull_request.number }}-${{ github.sha }}-${{ hashFiles('**/package-lock.json') }}
      - name: Run unit tests
        run: NODE_OPTIONS=--max_old_space_size=4096 npm run test:unit

  e2e-test:
    needs: [check-changes, build, test-unit]
    if: needs.check-changes.outputs.should_test == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/docker-setup
        with:
          docker-username: ${{ secrets.DOCKER_USERNAME }}
          docker-password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Debug environment variables
        run: |
          echo "DATABASE_URL is set: ${{ secrets.DATABASE_URL != '' }}"
          echo "GOOGLE_SHEETS_ID is set: ${{ secrets.GOOGLE_SHEETS_ID != '' }}"
          echo "GOOGLE_SHEETS_CLIENT_EMAIL is set: ${{ secrets.GOOGLE_SHEETS_CLIENT_EMAIL != '' }}"
          echo "GOOGLE_SHEETS_PRIVATE_KEY is set: ${{ secrets.GOOGLE_SHEETS_PRIVATE_KEY != '' }}"
          echo "REPO_TOKEN is set: ${{ secrets.REPO_TOKEN != '' }}"
          echo "REPO_OWNER is set: ${{ secrets.REPO_OWNER != '' }}"
          echo "REPO_REPO is set: ${{ secrets.REPO_REPO != '' }}"
      - name: Build and run E2E tests with Docker Compose
        env:
          API_URL: http://app-test:${{ secrets.PORT }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GOOGLE_SHEETS_CLIENT_EMAIL: ${{ secrets.GOOGLE_SHEETS_CLIENT_EMAIL }}
          GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
          GOOGLE_SHEETS_PRIVATE_KEY: ${{ secrets.GOOGLE_SHEETS_PRIVATE_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          LOG_FILE_PATH: ./logs
          LOG_FORMAT: json
          LOG_LEVEL: debug
          MONGO_CONNECT_TIMEOUT_MS: 10000
          MONGO_INITDB_ROOT_PASSWORD: example
          MONGO_INITDB_ROOT_USERNAME: root
          NODE_ENV: test
          PORT: ${{ secrets.PORT }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          REPO_REPO: ${{ secrets.REPO_REPO }}
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          docker compose --profile e2e-test build
          docker compose --profile e2e-test up --abort-on-container-exit --exit-code-from e2e-test-runner
      - name: Display logs
        if: always()
        run: docker compose --profile e2e-test logs app-test

  check-breaking-changes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Get base and head SHAs
        id: get_shas
        run: |
          echo "base_sha=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
          echo "head_sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT

      - name: Check for breaking changes
        run: |
          if git log --format=%B ${{ steps.get_shas.outputs.base_sha }}..${{ steps.get_shas.outputs.head_sha }} | grep -q "BREAKING CHANGE"; then
            echo "::warning ::This PR contains breaking changes. Please review carefully."
          else
            echo "No breaking changes detected."
          fi
