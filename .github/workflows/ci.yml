name: CI

on:
  push:
    branches: '*'
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  test-unit:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: |
          NODE_OPTIONS=--max_old_space_size=4096 npm run test:unit

  e2e-test:
    needs: [build, test-unit]
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=20s
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: dist
          path: dist

      - name: Install MongoDB Shell
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Verify MongoDB connection
        run: |
          mongosh --host localhost --port 27017 -u root -p example --eval "db.runCommand({ ping: 1 })"

      - name: Create log directory
        run: mkdir -p logs

      - name: Start application and wait for it to be ready
        run: |
          node dist/index.js > logs/app.log 2>&1 &
          echo $! > app.pid
          npx wait-on http://localhost:${{ secrets.PORT }}/health --timeout 60000

      - name: Wait for API to be ready
        run: |
          timeout 60s bash -c 'until curl -s http://localhost:${{ secrets.PORT }}/health; do sleep 5; done'

      - name: Run e2e tests
        run: |
          npm run build
          node --experimental-vm-modules node_modules/.bin/jest --config jest.config.docker.js --testMatch "**/dist/__tests__/e2e/**/*.e2e.spec.js" --forceExit --detectOpenHandles || (cat logs/app.log && kill $(cat app.pid) && exit 1)

      - name: Display logs
        if: always()
        run: cat logs/app.log

    env:
      NODE_ENV: test
      DATABASE_URL: mongodb://root:example@127.0.0.1:27017/myapp?authSource=admin
      GOOGLE_SHEETS_ID: ${{ secrets.GOOGLE_SHEETS_ID }}
      GOOGLE_SHEETS_CLIENT_EMAIL: ${{ secrets.GOOGLE_SHEETS_CLIENT_EMAIL }}
      GOOGLE_SHEETS_PRIVATE_KEY: ${{ secrets.GOOGLE_SHEETS_PRIVATE_KEY }}
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
      REPO_OWNER: ${{ secrets.REPO_OWNER }}
      REPO_REPO: ${{ secrets.REPO_REPO }}
      PORT: ${{ secrets.PORT }}
      CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      LOG_LEVEL: debug
      LOG_FORMAT: json
      LOG_FILE_PATH: ./logs
      API_URL: http://127.0.0.1:${{ secrets.PORT }}

  docker-build-and-push:
    needs: [build, test-unit, e2e-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: github.event_name == 'push'
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ secrets.DOCKER_USERNAME }}/your-image-name:${{ github.sha }}
          build-args: |
            NODE_ENV=production
